import OpenAI from 'openai';
import { OpenAIModelParams, TokenUsage, ChatMessage } from '../interfaces';

const openai = new OpenAI();

/**
 * Generate a response using OpenAI API and return token usage.
 * @param prompt - Array of conversation (history) messages.
 * @param modelParams - Parameters that control the model's behavior.
 * @returns Content generated by the specified model and token usage.
 */
export async function generateOpenAIResponse(
  prompt: string,
  modelParams: OpenAIModelParams,
): Promise<{ messages: ChatMessage[]; tokenUsage: TokenUsage | null }> {
  const response = await openai.chat.completions.create({
    messages: [{ role: 'user', content: prompt }],
    model: modelParams.model,
    max_tokens: modelParams.maxOutputTokens,
    temperature: modelParams.temperature,
    top_p: modelParams.topP,
  });

  // Convert to ChatMessage format: [{'role': 'assistant', 'content': 'Hello, how are you?'}]
  const convertedResponse = response.choices[0].message.content || '';

  // Get token usage from the response
  const tokenUsage = getOpenAITokenUsage(response);

  return {
    messages: [{ role: 'assistant', content: convertedResponse }],
    tokenUsage,
  };
}

/**
 * Get the token usage for an OpenAI response.
 * @param response - The OpenAI response object.
 * @returns The token usage or null if the response is invalid.
 */
export function getOpenAITokenUsage(response: OpenAI.Chat.ChatCompletion): TokenUsage | null {
  try {
    if (response && response.usage) {
      return {
        inputTokens: response.usage.prompt_tokens || 0,
        outputTokens: response.usage.completion_tokens || 0,
      };
    }
    return null;
  } catch (err) {
    console.error('Failed to get token usage:', err);
    return null;
  }
}
