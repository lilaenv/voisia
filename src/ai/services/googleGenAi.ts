import { GoogleGenAI } from '@google/genai';
import type { GenerateContentResponse } from '@google/genai';
import { GoogleGenAiModelParams, ChatMessage, TokenUsage } from '../interfaces';

const googleGenAi = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY,
});

/**
 * Generate a response using Google Gemini API and return token usage.
 * @param prompt - Array of conversation (history) messages.
 * @param modelParams - Parameters that control the model's behavior.
 * @returns Content generated by the specified model and token usage.
 */
export async function generateGoogleGenAiResponse(
  prompt: string,
  modelParams: GoogleGenAiModelParams,
): Promise<{ messages: ChatMessage[]; tokenUsage: TokenUsage | null }> {
  try {
    const response = await googleGenAi.models.generateContent({
      model: modelParams.model,
      contents: prompt,
      config: {
        systemInstruction: modelParams.system,
        maxOutputTokens: modelParams.maxOutputTokens,
        temperature: modelParams.temperature,
        topP: modelParams.topP,
      },
    });

    // Convert Gemini API response to ChatMessage format
    const candidates = response.candidates || [];
    const convertedResponse: ChatMessage[] = candidates.map((candidate) => {
      if (!candidate.content || !candidate.content.parts) {
        return { role: 'assistant' as const, content: '' };
      }
      return {
        role: 'assistant' as const,
        content: candidate.content.parts.map((part) => part.text || '').join(''),
      };
    });

    // Get token usage from the response
    const tokenUsage = getGoogleGenAiTokenUsage(response);

    return {
      messages: convertedResponse,
      tokenUsage,
    };
  } catch (err) {
    console.error('Error generating content:', err);
    throw err;
  }
}

/**
 * Get the token usage for a Google Gemini response.
 * @param response - The Google Gemini response object.
 * @returns The token usage or null if the response is invalid.
 */
export function getGoogleGenAiTokenUsage(response: GenerateContentResponse): TokenUsage | null {
  try {
    if (response && response.usageMetadata) {
      return {
        inputTokens: response.usageMetadata.promptTokenCount || 0,
        outputTokens: response.usageMetadata.candidatesTokenCount || 0,
      };
    }
    return null;
  } catch (err) {
    console.error('Failed to get token usage:', err);
    return null;
  }
}
